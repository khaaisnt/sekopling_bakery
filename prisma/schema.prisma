// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Cake {
  id            Int           @id @default(autoincrement())
  cake_name     String        @default("")
  cake_price    Float         @default(0) @db.Double
  cake_image    String        @default("")
  best_before   DateTime      @default(now())
  cake_flavour  String        @default("")
  compositions  Composition[]
  detail_orders detail_order[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Material {
  id              Int            @id @default(autoincrement())
  material_name   String         @default("")
  material_price  Float          @default(0) @db.Double
  material_type   MaterialType         
  compositions    Composition[]
  detail_supplies DetailSupply[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Composition {
  id                 Int      @id @default(autoincrement())
  cake_id            Int      
  material_id        Int      
  quantity           Float    
  cake               Cake     @relation(fields: [cake_id], references: [id])
  material           Material @relation(fields: [material_id], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Supplier {
  id               Int      @id @default(autoincrement())
  supplier_name    String   @default("")
  supplier_address String   @default("")
  supplier_phone   String   @default("") @db.VarChar(15)
  supplies         Supply[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Supply {
  id              Int            @id @default(autoincrement())
  supply_date     DateTime       @default(now())
  supplier_id     Int            @default(0)
  user_id         Int            @default(0)
  material_id     Int            @default(0)
  supplier        Supplier       @relation(fields: [supplier_id], references: [id])
  user            User           @relation(fields: [user_id], references: [id])
  detail_supplies DetailSupply[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model DetailSupply {
  id             Int      @id @default(autoincrement())
  supply_id      Int      @default(0)
  material_id    Int      @default(0)
  material_price Float    @default(0) @db.Double
  quantity       Float    @default(0)
  supply         Supply   @relation(fields: [supply_id], references: [id])
  material       Material @relation(fields: [material_id], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Order {
  id            Int           @id @default(autoincrement())
  order_date    DateTime      @default(now())
  user_id       Int
  status        statusType        
  user          User          @relation(fields: [user_id], references: [id])
  detail_order  detail_order[] 
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model detail_order {
  id         Int      @id @default(autoincrement())
  order_id   Int
  cake_id    Int
  cake_price Float    @default(0) @db.Double
  quantity   Float    @default(0)
  order      Order    @relation(fields: [order_id], references: [id])
  cake       Cake     @relation(fields: [cake_id], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


model User {
  id            Int      @id @default(autoincrement())
  user_name     String   @default("")
  user_email    String   @unique
  user_password String   @default("")
  user_role     UserRole
  supplies      Supply[]
  orders        Order[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum MaterialType {
  SOLID
  POWDER
  LIQUID
}

enum UserRole {
  ADMIN
  CASHIER
}

enum statusType {
  PENDING
  DONE
  CANCEL
}
